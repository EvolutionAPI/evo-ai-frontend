# Next.js Project Rules

## Language
- All code, comments, documentation, commits, and PRs MUST be written in English.

## Architecture

### Folder Structure
- `/app`: App router pages and API routes
  - Route-specific components should be placed in their respective route folders
- `/components`: Reusable UI components
  - `/ui`: Shadcn UI components and their derivatives
- `/contexts`: React Context providers
- `/hooks`: Custom React hooks
- `/lib`: Utility functions and configuration
- `/public`: Static assets
- `/services`: API service functions
- `/styles`: Global styles
- `/types`: TypeScript type definitions

### Component Guidelines
- Use functional components with TypeScript
- Use the `.tsx` extension for React components
- Follow a logical naming convention:
  - Complex components: Use PascalCase and create folders with an index.tsx file
  - Simple components: Single PascalCase named files

### State Management
- Use React Context for global state
- Use React hooks for local state
- Avoid prop drilling more than 2 levels deep

### API & Data Fetching
- Use API service modules in `/services` directory
- Implement proper error handling and loading states
- Use React Query or SWR for complex data fetching where appropriate

## Development Patterns

### Code Quality
- Maintain type safety - avoid using `any` type
- Write self-documenting code with descriptive names
- Keep components focused on a single responsibility
- Extract complex logic into custom hooks
- Follow DRY (Don't Repeat Yourself) principle

### CSS & Styling
- Use Tailwind CSS for styling
- Use Shadcn UI components as base building blocks
- Maintain consistent spacing and sizing

### Performance
- Avoid unnecessary re-renders
- Optimize images and assets
- Implement code splitting where appropriate
- Use dynamic imports for large components/pages

### Testing
- Write tests for critical business logic
- Test components in isolation
- Implement end-to-end tests for critical user flows

## Git Workflow

### Branch Naming
- Features: `feature/short-description`
- Bugfixes: `fix/short-description`
- Hotfixes: `hotfix/short-description`
- Releases: `release/version`

### Commit Convention
Follow the Conventional Commits specification:

- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that do not affect the meaning of the code (white-space, formatting, etc)
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing tests or correcting existing tests
- `build`: Changes that affect the build system or external dependencies
- `ci`: Changes to CI configuration files and scripts
- `chore`: Other changes that don't modify src or test files
- `revert`: Reverts a previous commit

Format: `type(scope): subject`

Examples:
- `feat(auth): add login form validation`
- `fix(api): resolve user data fetching issue`
- `docs(readme): update installation instructions`
- `style(components): format according to style guide`

### Pull Requests
- Keep PRs focused on a single feature or fix
- Include descriptive titles and descriptions
- Reference related issues
- Request code reviews from appropriate team members
- Ensure CI checks pass before merging

## Code Review Guidelines
- Focus on code quality, architecture, and maintainability
- Provide constructive feedback
- Address all review comments before merging
- Maintain a respectful and collaborative tone 